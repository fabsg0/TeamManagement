@page "/Departments"
@inject IDepartmentService DepartmentService
@inject ToastService Toast
@inject ILogger<Departments> Logger

<PageTitle>Departments</PageTitle>

<div>
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="fw-bold">Departments</h2>
        <button type="button" class="btn btn-success" @onclick="() => _showCreatePopup = true">
            <i class="fa fa-plus-circle me-1"></i> Create Department
        </button>
    </div>

    @if (_isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-3">Loading departments...</p>
        </div>
    }
    else if (!_departments.Any())
    {
        <div class="alert alert-info text-center">
            No departments found. Click "Create Department" to get started.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                <tr>
                    <th>Name</th>
                    <th>Icon</th>
                    <th class="text-end">Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var department in _departments)
                {
                    <tr class="@(_selectedDepartment == department ? "table-active" : "")"
                        @onclick="() => _selectedDepartment = department">
                        <td>@department.Name</td>
                        <td><i class="fa fa-@department.Icon"></i></td>
                        <td class="text-end">
                            <button type="button" class="btn btn-sm btn-warning me-1"
                                    @onclick="@(_ => OpenUpdatePopup(department))">
                                <i class="fa fa-pen"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-danger"
                                    @onclick="@(_ => OpenDeletePopup(department))">
                                <i class="fa fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }

    @if (_showCreatePopup)
    {
        <CreateDepartmentPopup OnClose="async () => await HandlePopupClose()" />
    }

    @if (_showUpdatePopup)
    {
        <UpdateDepartmentPopup DepartmentId="_selectedDepartment.Id"
                               Department="@(new DepartmentDto { Name = _selectedDepartment.Name, Icon = _selectedDepartment.Icon })"
                               OnClose="async () => await HandlePopupClose()" />
    }

    @if (_showDeletePopup)
    {
        <DeleteDepartmentPopup Department="_selectedDepartment"
                               OnClose="async () => await HandlePopupClose()" />
    }
</div>

@code {
    private List<TbDepartment> _departments = [];
    private TbDepartment _selectedDepartment = new();

    private bool _showCreatePopup;
    private bool _showUpdatePopup;
    private bool _showDeletePopup;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync() => await FetchDepartments();

    private async Task FetchDepartments()
    {
        _isLoading = true;
        try
        {
            _departments = await DepartmentService.GetDepartmentsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to fetch departments.");
            Toast.ShowError("Failed to fetch departments.");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandlePopupClose()
    {
        _showCreatePopup = false;
        _showUpdatePopup = false;
        _showDeletePopup = false;
        _selectedDepartment = new TbDepartment();
        await FetchDepartments();
    }

    private void OpenUpdatePopup(TbDepartment department)
    {
        _selectedDepartment = department;
        _showUpdatePopup = true;
    }

    private void OpenDeletePopup(TbDepartment department)
    {
        _selectedDepartment = department;
        _showDeletePopup = true;
    }
}
