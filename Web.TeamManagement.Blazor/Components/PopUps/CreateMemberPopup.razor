@inject IMemberService MemberService
@inject IDepartmentService DepartmentService
@inject ToastService ToastService
@inject ILogger<CreateMemberPopup> Logger

<PopUp IsVisible="true" IsVisibleChanged="@(async () => await OnClose.InvokeAsync())">
    <PopupHeader>Create Member</PopupHeader>
    <PopupContent>
        <EditForm Model="_memberToCreate">
            <div class="container-fluid">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">First Name</label>
                        <InputText class="form-control" placeholder="John"
                                   @bind-Value="_memberToCreate.Member.FirstName"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Last Name</label>
                        <InputText class="form-control" placeholder="Doe"
                                   @bind-Value="_memberToCreate.Member.LastName"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Birthdate</label>
                        <InputDate class="form-control" @bind-Value="_birthDate"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Email</label>
                        <InputText type="email" class="form-control" placeholder="you@example.com"
                                   @bind-Value="_memberToCreate.Member.Email"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Phone</label>
                        <InputText class="form-control" placeholder="+1 234 567 890"
                                   @bind-Value="_memberToCreate.Member.Telephone"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Street</label>
                        <InputText class="form-control" placeholder="Main Street"
                                   @bind-Value="_memberToCreate.Member.Street"/>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Number</label>
                        <InputText class="form-control" placeholder="12A" @bind-Value="_memberToCreate.Member.Number"/>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Zip Code</label>
                        <InputNumber class="form-control" placeholder="12345"
                                     @bind-Value="_memberToCreate.Member.ZipCode"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">City</label>
                        <InputText class="form-control" placeholder="City" @bind-Value="_memberToCreate.Member.City"/>
                    </div>

                    <div class="col-12">
                        <label class="form-label mb-2">Departments</label>
                        <div class="d-flex flex-wrap gap-3">
                            @foreach (var department in _departments)
                            {
                                <div class="form-check">
                                    <InputCheckbox class="form-check-input" @bind-Value="department.IsAssigned"/>
                                    <label class="form-check-label">@department.Name</label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </PopupContent>
    <PopupFooter>
        <button type="button" class="btn btn-success" @onclick="CreateMember" disabled="@_submitButtonDisabled">
            <i class="bi bi-check-circle me-1"></i>Submit
        </button>
        <button type="button" class="btn btn-secondary" @onclick="OnClose">
            <i class="bi bi-x-circle me-1"></i>Cancel
        </button>
    </PopupFooter>
</PopUp>

@code {
    [Parameter] public EventCallback OnClose { get; set; }

    private bool _submitButtonDisabled;
    private List<DepartmentModel> _departments = [];
    private DateTime _birthDate;

    private MemberModelDto _memberToCreate = new()
    {
        Member = new MemberModel(),
        DepartmentIds = []
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchDepartments();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to fetch departments.");
        }
    }

    private async Task FetchDepartments()
    {
        var department = await DepartmentService.GetDepartmentsAsync();

        foreach (var dep in department)
        {
            _departments.Add(new DepartmentModel
            {
                Id = dep.Id,
                Name = dep.Name,
                IsAssigned = false
            });
        }
    }

    private async Task CreateMember()
    {
        try
        {
            _submitButtonDisabled = true;
            foreach (var department in _departments)
            {
                if (department.IsAssigned)
                {
                    _memberToCreate.DepartmentIds.Add(department.Id);
                }
            }

            _memberToCreate.Member.Birthdate = DateOnly.FromDateTime(_birthDate);
            var response = await MemberService.CreateMemberAsync(_memberToCreate);

            if (response.StatusCode != HttpStatusCode.Created)
                throw new Exception($"Http StatusCode was not expected. It was {response.StatusCode}.");

            ToastService.ShowSuccess("Member created");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create member.");
            ToastService.ShowError("Failed to create member.");
        }
        finally
        {
            _submitButtonDisabled = false;
            _memberToCreate = new MemberModelDto();
            _departments = [];
            await OnClose.InvokeAsync();
        }
    }

}